package org.helmo.gbeditor.infrastructures;

import org.helmo.gbeditor.domains.Author;
import org.helmo.gbeditor.repositories.ConnectionFailedException;
import org.junit.jupiter.api.*;

import java.sql.Statement;

import static org.junit.jupiter.api.Assertions.*;

public class DataStorageTests {

    private static DataStorageFactory factory = new DataStorageFactory(
            "org.apache.derby.jdbc.EmbeddedDriver",
            "jdbc:derby:test",
            "",
            ""
    );

    private static DataStorage connection;

    static {
        try {
            connection = factory.newDataStorageSession();
        } catch (ConnectionFailedException e) {
            e.printStackTrace();
        }
    }

    private static String TABLE_BOOK = "CREATE TABLE BOOK(" +
                                        " idBook INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                                        " title VARCHAR(150) NOT NULL," +
                                        " isbn VARCHAR(20) NOT NULL UNIQUE," +
                                        " resume VARCHAR(500) NOT NULL," +
                                        " isPublier BOOLEAN NOT NULL," +
                                        " idAuthor INT NOT NULL)";

    private static String TABLE_PAGE = "CREATE TABLE PAGE(" +
                                            " idPage INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                                            " num INT NOT NULL," +
                                            " contain VARCHAR(1000) NOT NULL," +
                                            " isbn VARCHAR(20) NOT NULL," +
                                            " idBook INT NOT NULL)";

    private static String TABLE_CHOICE = "CREATE TABLE CHOICE(" +
                                            " idChoice INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                                            " contain VARCHAR(1000) NOT NULL," +
                                            " idPage INT NOT NULL)";

    private static String TABLE_AUTHOR = "CREATE TABLE AUTHOR(" +
                                            " idAuthor INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                                            " name VARCHAR(1000) NOT NULL)";

    @BeforeEach
    public void setup(){
        try(Statement setup = connection.getConnection().createStatement()){
            setup.executeUpdate(TABLE_CHOICE);
            setup.executeUpdate(TABLE_PAGE);
            setup.executeUpdate(TABLE_BOOK);
            setup.executeUpdate(TABLE_AUTHOR);
        }catch(Exception e){
            fail("la création des tables a échoué\n" + e.getMessage());
        }
    }

    @AfterEach
    public void teardown(){
        try(Statement drop = connection.getConnection().createStatement()){
            drop.executeUpdate("DROP TABLE CHOICE");
            drop.executeUpdate("DROP TABLE PAGE");
            drop.executeUpdate("DROP TABLE BOOK");
            drop.executeUpdate("DROP TABLE AUTHOR");
        }catch(Exception e){
            fail("la suppression des tables a échoué\n" + e.getMessage());
        }
    }

    /*@Test
    public void insertBook(){
        Book book = new Book(null, null, null, new Author("moi", "et moi"));
        try(DataStorage storage = factory.newDataStorageSession()) {
            storage.saveAuthor(book.getAuthor());
            storage.saveBook(book);
            assertTrue(true);
        }catch(Exception e){
            fail("l'insertion du livre a échoué");
        }
    }*/

    @Test
    public void insertAuthor(){
        Author author = new Author("moi", "et moi");
        try(DataStorage storage = factory.newDataStorageSession()) {
            storage.saveAuthor(author);
            assertTrue(true);
        }catch(Exception e){
            fail("l'insertion de l'auteur a échoué");
        }
    }

    /*@Test
    public void insertPageListWithPage(){
        List<Page> listPage = new ArrayList<>();
        Page page = new Page("page 1");
        try(DataStorage storage = factory.newDataStorageSession()) {
            storage.savePage(page,0);
            assertTrue(true);
        }catch(Exception e){
            fail("l'insertion des pages a échoué");
        }
    }

    @Test
    public void removePage(){
        Page page = new Page("page 1");

        try(DataStorage storage = factory.newDataStorageSession()) {
            storage.savePage(page,0);
            storage.deletePage(page,0);
            assertTrue(true);
        }catch(Exception e){
            fail("la supprission des pages a échoué");
        }
    }*/


}
